/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package com.hapnel.velograph;

import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.Persistence;

import org.eclipse.core.runtime.jobs.Job;
import org.junit.Before;
import org.junit.Test;

import com.horus.velograph.DAG;
import com.horus.velograph.Graph;
import com.horus.velograph.api.Edge;
import com.horus.velograph.api.Vertex;
import com.horus.velograph.util.u;


public class VeloTest {
	
	@Before 
	public void start() {
		
			try {
		
			//		pmf = JDOHelper.getPersistenceManagerFactory(getClass().getClassLoader().getResourceAsStream("Tutorial.properties"));
		
			} catch(Exception e) {}

        System.out.println("DataNucleus AccessPlatform with JDO");
        System.out.println("===================================");

        // Persistence of a Product and a Book.
  //      pm = pmf.getPersistenceManager();
  //     tx=pm.currentTransaction();
	}
	
	
    @Test
    public void shouldCreateGraph() {

    Graph<Vertex, Edge> graph = new DAG("d1");

        graph.addEdge(u.mv("A"), u.mv("B"));
        graph.addEdge(u.mv("A"), u.mv("C"));
        graph.addEdge(u.mv("C"), u.mv("D"));
        graph.addEdge(u.mv("D"), u.mv("E"));
        graph.addEdge(u.mv("D"), u.mv("G"));
        graph.addEdge(u.mv("E"), u.mv("G"));
        graph.addVertex(u.mv("H"));

        System.out.println(graph);

        System.out.println("Vertices: " + graph.getNumVertices());
        System.out.println("Edges: " + graph.getNumEdges());
    }
	
	@Test
	public void testJPA() {
		
		
		/*
		EntityManagerFactory emfactory = Persistence.createEntityManagerFactory( "RivuChk_JPA" );
	   	EntityManager entitymanager = emfactory.createEntityManager( );	   	
		entitymanager.getTransaction( ).begin( );
				
		Department dept = new Department(5, "science");		
				
				
		Job job = new Job();
		
		job.setDesignation("scientist");

		entitymanager.persist(job);
			
		Employee emp = new Employee();

	//	emp.setEid(1078);
		emp.setEname("musor");
		emp.setSalary(1000);
		
		emp.setDepartment(dept);
		emp.setJob(job);
					
		entitymanager.persist(emp);

		entitymanager.getTransaction( ).commit( );
		
		*/
    }
	
}